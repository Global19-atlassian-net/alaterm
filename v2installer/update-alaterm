#!/bin/bash
# This script updates installed Alaterm.
# Ordinary usage, from Termux without lauhnching Alaterm:
# Enter this folder, then command:  bash update-alaterm

let v2latest=223

if [ -r /usr ] ; then # Termux has $PREFIX/usr, Alaterm has /usr.
	echo "Alaterm cannot be updated while it is running."
	echo "Logout of Alaterm, then update from Termux."
	exit 1
fi

# Location of this script file, even if called from somewhere else:
export here="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
cd "$here" # Update component files are relative to $here.

# Quick test for downloaded stuff. Does not test everything:
gotstuff="yes"
[ ! -d "$here/help-alaterm" ] && gotstuff="no"
[ ! -d "$here/templates" ] && gotstuff="no"
[ ! -f "$here/process/globals.bash" ] && gotstuff="no"
if [ "$gotstuff" != "yes" ] ; then
	echo "You do not have all the necessary files."
	echo "Get all of the Alaterm repository ZIP, at:"
	echo "  https://github.com/cargocultprog/alaterm"
	echo "Unzip it in launched Alaterm, and try again."
	exit 1
else
	source "$here/process/globals.bash"
fi

# Test for Alaterm:
if [ ! -d "$alatermTop" ] ; then
	echo -e "$PROBLEM Did not find Alaterm installation."
	echo "Expected: $alatermTop"
	exit 1
else
	chmod 755 "$alatermTop"
fi

# Test for status file:
if [ -f "$alatermTop/status" ] ; then
	chmod 644 "$alatermTop/status"
	source "$alatermTop/status"
	if [ ! -f "$alatermTop/alastat.orig" ] ; then
		cp "$alatermTop/status" "$alatermTop/alastat.orig"
		chmod 444 "$alatermTop/alastat.orig"
	fi
else
	if [ -f "$alatermTop/alastat.orig" ] ; then
		cp "$alatermTop/alastat.orig" "$alatermTop/status"
		chmod 644 "$alatermTop/status"
		source "$alatermTop/status"
		echo -e "$WARNING Missing status file."
		echo "Found alastat.orig."
		echo "Copied alastat.orig to status. Using it."
	else
		echo -e "$PROBLEM Cannot find status file."
		echo "Without it, cannot update Alaterm."
		exit 1
	fi
fi

# Test whether Alaterm needs update:
if [ "$scriptRevision" = "" ] || [ "$scriptRevision" -lt 40 ] ; then
	echo "Your Alaterm installation is too old for updates."
	echo "Nothing done. If Alaterm is working, no problem."
	echo "If Alaterm is failing, consider fresh re-install."
	exit 1
elif [ "$scriptRevision" -ge "$v2latest" ] ; then
	echo "Your installation is up-to-date."
	echo "Its scriptRevision is $scriptRevision"
	echo "Nothing done."
	exit 0
fi

# Generic finish:
update_done() {
	echo "let scriptRevision=$v2latest" >> "$alatermTop/status"
	printf " $DONE\n"
	exit 0
} # End update_done.

# install_template creates an Alaterm file, from a file in templates folder.
install_template() { # Takes 1 or 2 arguments: filename in /templates, chmod.
	t="$here/templates/$1"
	if [ ! -f "$t" ] ; then
		echo -e "$PROBLEM install_template cannot locate file:"
		echo "  templates/$1"
		exit 1
	fi
	if [ "$#" -gt 2 ] ; then
		echo -e "$PROBLEM More than 2 arguments for:"
		echo "  install_template $1"
		exit 1
	fi
	if [ "$#" = "2" ] ; then # Optional chmod.
		ok="no"
		[[ "$2" =~ ^[1-7][0-7][0-7]$ ]] && ok="yes" # 3 digits.
		[[ "$2" =~ ^[0=7][1-7][0-7][0-7]$ ]] && ok="yes" # 4 digits.
		if [ "$ok" != "yes" ] ; then
			echo -e "$PROBLEM Bad chmod code $2 for:"
			echo "  install_template $1."
			exit 1
		fi
	fi
	fs="" # Initialize.
	fs="$(grep "laterm:file=" $t 2>/dev/null)" # Find the instruction.
	# Extract destination filename from filestring:
	fs="$(echo $fs | sed 's/.*laterm:file=//')"
	fs="$(echo $fs | sed 's/ .*//')" # Destination ends at space.
	if [ "$fs" = "" ] ; then
		echo -e "$PROBLEM Cannot find instruction, Alaterm:file="
		echo "  in templates/$1."
		exit 1
	fi
	# Expand filestring variables, if present.
	# These are paths containing / so alternative ! must be used in sed:
	fs=$(echo "$fs" | sed "s!\$alatermTop!$alatermTop!")
	fs=$(echo "$fs" | sed "s!\$PREFIX!$PREFIX!")
	fs=$(echo "$fs" | sed "s!\$HOME!$HOME!")
	fs=$(echo "$fs" | sed "s!\$launchCommand!$launchCommand!")
	# If necessary, create the directory path:
	dir="$(echo $fs | sed 's![^/]*$!!')" # Path only.
	mkdir -p "$dir" 2>/dev/null
	if [ "$?" -ne 0 ] ; then
		echo -e "$PROBLEM Cannot create directory:"
		echo "  $dir"
		echo "  required by install_template $1."
		exit 1
	fi
	sleep .05
	cp "$t" "$fs"
	sleep .05
	sed -i '/laterm:file=/d' "$fs" # Remove instruction line.
	# After removing instruction, most templates are installed verbatim.
	# Use PARSE for variables that must be expanded there.
	sed -i "s!PARSE\$launchCommand!$launchCommand!" "$fs"
	sed -i "s!PARSE\$alatermTop!$alatermTop!" "$fs"
	sed -i "s!PARSE\$userLocale!$userLocale!" "$fs"
	sed -i "s!PARSE\$PREFIX!$PREFIX!" "$fs" # Termux.
	sed -i "s!PARSE\$HOME!$HOME!" "$fs" # Termux.
	# chmod if specified:
	if [ "$#" = "2" ] ; then
		chmod "$2" "$fs"
	else
		chmod 644 "$fs"
	fi
	sleep .05
} # End install_template.


## BEGIN UPDATES.
## ---------------------------------------------------------------------------
# How to list updates:
# Updates are grouped by v2latest, with most recent listed first.
# Current scriptRevision is checked, at the beginning of each group.
# Most updates involve installing templates.
# Place install_template FILENAME only in the most recent group.

printf "Updating Alaterm..."
# Always re-install help files, to ensure latest:
cp -r "$here/help-alaterm" "$alatermTop/usr/local/"
printf "."


### Begin group of updates past 223 and including v2latest=224:
[ "$scriptRevision" -ge 224 ] && update_done
# Updates for 224 go here. None yet.
### End group of updates past 223 and including v2latest=224.


### Begin group of updates up to and including v2latest=223:
# This is the earliest update using this technique.
[ "$scriptRevision" -ge 223 ] && update_done
## In case this was not done earlier:
mkdir -p "$alatermTop/system"
mkdir -p "$alatermTop/vendor"
mkdir -p "$alatermTop/odm"
mkdir -p "$alatermTop/home/.config/dbus"
mkdir -p "$alatermTop/home/.local/share/applications"
## Improved launch command:
install_template "launchcommand.bash" "755" && printf "."
cp "$alatermTop/usr/local/scripts/$launchCommand" "$termuxPrefix/bin"
## Remove obsolete files:
rm -f "$alatermTop/usr/local/scripts/start-vnc" # Perl, not bash.
rm -f "$alatermTop/usr/local/scripts/stop-vnc" # Obsolete.
rm -f "$alatermTop/usr/bin/$launchCommand" # Now in /usr/local/scripts.
rm -f "$alatermTop/etc/pacman.d/hooks/fixdbuslaunch.hook" # Obsolete.
rm -f "$alatermTop/usr/local/scripts/fixdbuslaunch" # Obsolete.
rm -r -f "$alatermTop/usr/local/alaterm-help" # Now help-alaterm.
rm -f "$alatermTop/status.orig" # Now alastat.orig.
## Install or reinstall templates that should not have user customization:
install_template "autoremove.bash" "755" && printf "."
install_template "ban-menu-items.bash" "755" && printf "."
install_template "ban-menu-items.hook" && printf "."
install_template "bash.bash_logout.bash" && printf "."
install_template "bash.bashrc.bash" && printf "."
install_template "compile-libde265.bash" "755" && printf "."
install_template "compile-libmad.bash" "755" && printf "."
install_template "compile-libmpeg2.bash" "755" && printf "."
install_template "dbus-programs.bash" "755" && printf "."
install_template "dbus-programs.hook" && printf "."
install_template "default-resolution.bash" "755" && printf "."
install_template "home.bash_profile.bash" && printf "."
install_template "home.vnc-xstartup.bash" "755" && printf "."
install_template "home.xinitrc.bash" && printf "."
install_template "menu.xml" && printf "."
install_template "mimeapps-list.bash" "755" && printf "."
install_template "mimeapps-list.hook" && printf "."
install_template "nanorc.conf" && printf "."
install_template "pkg.bash" "755" && printf "."
install_template "profile.bash" && printf "."
install_template "ps.bash" "755" && printf "."
install_template "readme-local.md" && printf "."
install_template "readme-trash.md" && printf "."
install_template "start-vnc.pl" "755" && printf "."
install_template "top.bash" "755" && printf "."
install_template "vncserver.bash" "755" && printf "."
install_template "vncviewer.bash" "755" && printf "."
## May have been mis-installed:
thisfile="$alatermTop/home/.Xdefaults"
[ ! -f "$thisfile" ] && install_template "home.Xdefaults.conf" && printf "."
thisfile="$alatermTop/home/.config/TUG/TeXworks.conf"
if [ -f "$thisfile" ] ; then
	grep PARSE "$thisfile" >/dev/null 2>&1
	if [ "$?" -eq 0 ] ; then # Only fix one line, in case user customized.
		sed -i "s!PARSE\$userLocale!$userLocale!" "$thisfile"
	fi
	printf "."
else
	install_template "TeXworks.conf" && printf "."
fi
## Remove bad line from bookmarks:
thisfile="$alatermTop/home/.config/gtk-3.0/bookmarks"
if [ -f "$thisfile" ] ; then
	sed -i '/file=/d' "$thisfile" && printf "."
else
	install_template "bookmarks.conf" && printf "."
fi
## Remove obsolete lines from /home/.bashrc. Aliases now in .bash_profile:
thisfile="$alatermTop/home/.bashrc"
sed -i '/alias ls/d' "$thisfile"
sed -i '/alias pacman/d' "$thisfile"
sed -i '/alias fc-cache/d' "$thisfile"
sed -i '/alias vncviewer/d' "$thisfile"
sed -i '/installed vncviewer/d' "$thisfile" && printf "."
## Unnecessary line in /status:
sed -i '/^scriptLocation/d' "$alatermTop/status"
## These templates do not need edit or reinstall:
# root.bashrc.bash
# root.bash_profile.bash
# lxde-rc.xml
# home.vnc-config.conf
# panel.conf
# desktop-items-0.conf
## These templates are only used during initial install. Never reinstalled:
# getlxde-profile.bash
# getlxde-launch.bash
# prelim-profile.bash
# prelim-launch.bash
update_done
##
